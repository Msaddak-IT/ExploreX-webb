{% extends 'baseback.html.twig' %}

{% block title %}Categorie index{% endblock %}

{% block main %}
    <h1 style="color: #3498db;">Categorie index</h1>

    <div class="mb-3">
        <label for="searchInput" class="form-label" style="color: #e74c3c;">Search:</label>
        <input type="text" class="form-control" id="searchInput" oninput="searchAndSortCategories()" style="border-color: #e74c3c; color: #3498db;" />
    </div>

    <table class="table table-bordered" id="categorieTable" style="border: 2px solid #3498db;">
        <thead style="background-color: #3498db; color: #fff;">
            <tr>
                <th><button class="btn btn-info" onclick="sortTable(0)" style="color: #fff;">Id</button></th>
                <th><button class="btn btn-info" onclick="sortTable(1)" style="color: #fff;">NomCategorie</button></th>
                <th>Rating</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            {% for categorie in categories %}
                <tr>
                    <td>{{ categorie.id }}</td>
                    <td>{{ categorie.nomCategorie }}</td>
                    <td>
                        <div class="rating" data-category="{{ categorie.id }}" onmouseover="highlightStars(this)" onmouseout="resetStars(this)">
                            {% for i in 1..5 %}
                                <i class="fas fa-star" data-rating="{{ i }}" onclick="rateCategory({{ categorie.id }}, {{ i }})"></i>
                            {% endfor %}
                        </div>
                        <span id="averageRating{{ categorie.id }}"></span>
                    </td>
                    <td>
                        <a href="{{ path('app_categorie_show', {'id': categorie.id}) }}" class="btn btn-primary" style="background-color: #3498db; color: #fff;">Show</a>
                        <a href="{{ path('app_categorie_edit', {'id': categorie.id}) }}" class="btn btn-warning" style="background-color: #f39c12; color: #fff;">Edit</a>
                    </td>
                </tr>
            {% else %}
                <tr>
                    <td colspan="4" style="text-align: center; color: #e74c3c;">No records found</td>
                </tr>
            {% endfor %}
        </tbody>
    </table>

    <a href="{{ path('app_categorie_new') }}" class="btn btn-success" style="background-color: #2ecc71; color: #fff;">Create new</a>

    <script>
        function searchAndSortCategories() {
            const searchInput = document.getElementById('searchInput').value.toUpperCase();
            const rows = document.querySelectorAll('#categorieTable tbody tr');

            rows.forEach(row => {
                const cols = row.getElementsByTagName('td');
                let found = false;

                for (let i = 0; i < cols.length; i++) {
                    const cellText = cols[i].textContent || cols[i].innerText;

                    if (cellText.toUpperCase().indexOf(searchInput) > -1) {
                        found = true;
                        break;
                    }
                }

                row.style.display = found ? '' : 'none';
            });

            sortTable(0); // Tri par défaut par Id après la recherche
        }

        function sortTable(columnIndex) {
            var table, rows, switching, i, x, y, shouldSwitch;
            table = document.getElementById("categorieTable");
            switching = true;

            while (switching) {
                switching = false;
                rows = table.getElementsByTagName("tr");

                for (i = 1; i < (rows.length - 1); i++) {
                    shouldSwitch = false;
                    x = rows[i].getElementsByTagName("td")[columnIndex];
                    y = rows[i + 1].getElementsByTagName("td")[columnIndex];

                    if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                        shouldSwitch = true;
                        break;
                    }
                }

                if (shouldSwitch) {
                    rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                    switching = true;
                }
            }
        }

        function rateCategory(categoryId, rating) {
            const stars = document.querySelectorAll(`.rating[data-category="${categoryId}"] .fa-star`);

            stars.forEach(star => {
                const currentRating = parseInt(star.dataset.rating);
                star.classList.toggle('rated', currentRating <= rating);
            });

            updateAverageRating(categoryId);
        }

        function highlightStars(container) {
            const stars = container.querySelectorAll('.fa-star');
            stars.forEach(star => star.classList.add('hovered'));
        }

        function resetStars(container) {
            const stars = container.querySelectorAll('.fa-star');
            stars.forEach(star => star.classList.remove('hovered'));
        }

        function updateAverageRating(categoryId) {
            const stars = document.querySelectorAll(`.rating[data-category="${categoryId}"] .fa-star`);
            let totalRating = 0;
            let ratedStars = 0;

            stars.forEach(star => {
                if (star.classList.contains('rated')) {
                    totalRating += parseInt(star.dataset.rating);
                    ratedStars++;
                }
            });

            const averageRating = (ratedStars > 0) ? totalRating / ratedStars : 0;
            const averageRatingElement = document.getElementById(`averageRating${categoryId}`);
            averageRatingElement.innerText = `Average Rating: ${averageRating.toFixed(1)}`;
        }
    </script>
{% endblock %}
